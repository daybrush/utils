{"version":3,"file":"shapetri.min.js","sources":["../src/consts.ts","../src/index.ts"],"sourcesContent":["export const TOP = \"top\";\nexport const BOTTOM = \"bottom\";\nexport const LEFT = \"left\";\nexport const RIGHT = \"right\";\nexport type DIRECTION = \"top\" | \"bottom\" | \"left\" | \"right\";\nexport const REVERSE = {\n  [TOP]: BOTTOM,\n  [BOTTOM]: TOP,\n  [LEFT]: RIGHT,\n  [RIGHT]: LEFT,\n};\nexport const TRI_CLASS = \"__shape-tri-\";\nexport const SIDE_CLASS = `${TRI_CLASS}side`;\nexport const POSITION_ABSOLUTE = \"position:absolute;\";\n","import { BOTTOM, TOP, RIGHT, LEFT, REVERSE, DIRECTION, SIDE_CLASS, POSITION_ABSOLUTE, TRI_CLASS } from \"./consts\";\n\nfunction splitUnit(text: string) {\n  const matches = /^([^\\d|e|\\-|\\+]*)((?:\\d|\\.|-|e-|e\\+)+)(\\S*)$/g.exec(text);\n\n  if (!matches) {\n    return { unit: \"\", value: NaN };\n  }\n  const value = matches[2];\n  const unit = matches[3];\n\n  return { unit, value: parseFloat(value) };\n}\n\nfunction getSideCSS(strokeWidth: string, isVertical: boolean) {\n  const x = isVertical ? strokeWidth : \"50%\";\n  const y = isVertical ? \"50%\" : strokeWidth;\n\n  return `${POSITION_ABSOLUTE}width:100%;height:100%;border-radius:inherit;background-color:inherit;` +\n          `transform-origin:${x} ${y};`;\n}\n\nfunction makeDOM(tag: string, className: string) {\n  const el = document.createElement(tag);\n\n  el.className = className;\n  return el;\n}\nexport function dom(el: HTMLElement) {\n  const strokeWidth = el.getAttribute(\"data-stroke-width\") || undefined;\n  const stroke = el.getAttribute(\"data-stroke\") || undefined;\n  const direction = (el.getAttribute(\"data-direction\") as DIRECTION) || undefined;\n  const fill = el.getAttribute(\"data-fill\") || undefined;\n\n  return tri({strokeWidth, stroke, direction, fill, container: el});\n}\nexport function tri({\n  className = `${TRI_CLASS}triangle`,\n  strokeWidth = 0,\n  stroke = \"black\",\n  fill = \"transparent\",\n  direction = BOTTOM,\n  container = makeDOM(\"div\", className),\n}: {\n  strokeWidth: number | string,\n  className?: string,\n  container?: HTMLElement,\n  fill?: string,\n  direction?: DIRECTION,\n  stroke?: string\n}) {\n  const {unit: strokeUnit, value: strokeValue} = splitUnit(`${strokeWidth}`);\n  const half = `${strokeValue / 2}${strokeUnit}`;\n  const isVertical = direction === TOP || direction === BOTTOM;\n  const sideCSS = getSideCSS(half, isVertical);\n  const directionProperty = isVertical ? LEFT : TOP;\n  const sign = direction === TOP || direction === RIGHT ? -1 : 1;\n  const width = isVertical ? \"100%\" : strokeWidth;\n  const height = isVertical ? strokeWidth : \"100%\";\n  // (50% - strokeWidth / 2) * r3 + strokeWidth\n  const padding = isVertical ? `calc(50% * 1.7321 + ${strokeWidth} * 0.132)` :\n  // (100% - strokeWidth) / r3 * 2 + strokeWidth\n    `calc(200% / 1.7321 - ${strokeWidth} * 1.154 + ${strokeWidth})`;\n  const reverseDirection = REVERSE[direction];\n  const sideHTML = `<div class=\"${SIDE_CLASS}1\" style=\"${POSITION_ABSOLUTE}${reverseDirection}: 0;\n  ${directionProperty}:0;display:inline-block;width:${width};height:${height};border-radius:${half};\n  background:${stroke};\"><div class=\"${SIDE_CLASS}2\"\n  style=\"${sideCSS}transform:rotate(${sign * 60}deg);\"></div><div class=\"${SIDE_CLASS}3\"\n  style=\"${sideCSS}${directionProperty}:100%;\n  margin-${directionProperty}:-${strokeWidth};\n  transform:rotate(${sign * 120}deg)\"></div></div><div class=\"${TRI_CLASS}percent\" style=\"position:relative;\n  width:100%;padding-top:${padding};\"\n  ></div>`;\n\n  if (getComputedStyle(container).position === \"static\") {\n    container.style.position = \"relative\";\n  }\n  container.insertAdjacentHTML(\"beforeend\", sideHTML);\n\n  return container;\n}\n\nexport const VERSION = \"#__VERSION__#\";\n"],"names":["TOP","BOTTOM","LEFT","RIGHT","REVERSE","_a","TRI_CLASS","SIDE_CLASS","POSITION_ABSOLUTE","tri","tag","className","el","strokeWidth","isVertical","_b","_c","_d","stroke","fill","direction","_g","container","document","createElement","_h","text","matches","exec","unit","value","NaN","parseFloat","strokeUnit","half","sideCSS","directionProperty","sign","width","height","padding","reverseDirection","sideHTML","getComputedStyle","position","style","insertAdjacentHTML","getAttribute","undefined"],"mappings":";;;;;;;0LAAaA,EAAM,MACNC,EAAS,SACTC,EAAO,OACPC,EAAQ,QAERC,UACVJ,GAAMC,EACPI,EAACJ,GAASD,EACVK,EAACH,GAAOC,EACRE,EAACF,GAAQD,KAEEI,EAAY,eACZC,EAAgBD,SAChBE,EAAoB,8BCuBjBC,EAAIJ,OAdHK,EAAaC,EACtBC,EATYC,EAAqBC,EAuBvCC,cAAAJ,4BACAK,gBAAAH,iBACAI,WAAAC,uBACAC,uBACAC,iBACAC,cAAAC,cApBeZ,QAAaC,KACtBC,EAAKW,SAASC,cAAcd,IAE/BC,UAAYA,EACRC,KAyBDa,EAjDR,SAAmBC,OACXC,EAAU,gDAAgDC,KAAKF,OAEhEC,QACI,CAAEE,KAAM,GAAIC,MAAOC,SAEtBD,EAAQH,EAAQ,SAGf,CAAEE,KAFIF,EAAQ,GAENG,MAAOE,WAAWF,WAwC1BG,SACDC,EAAO,WAAiB,EAAID,EAC5BnB,EAAaM,IAAcpB,GAAOoB,IAAcnB,EAChDkC,GAxCYtB,EAwCSqB,EApCjB1B,8FAJ6BM,EAwCNA,GAvCVD,EAAc,YAC3BC,EAAa,MAAQD,QAuCzBuB,EAAoBtB,EAAaZ,EAAOF,EACxCqC,EAAOjB,IAAcpB,GAAOoB,IAAcjB,GAAS,EAAI,EACvDmC,EAAQxB,EAAa,OAASD,EAC9B0B,EAASzB,EAAaD,EAAc,OAEpC2B,EAAU1B,EAAa,uBAAuBD,sCAE1BA,gBAAyBA,MAC7C4B,EAAmBrC,EAAQgB,GAC3BsB,EAAW,eAAenC,eAAuBC,EAAoBiC,aACzEL,mCAAkDE,aAAgBC,oBAAwBL,qBAC/EhB,oBAAwBX,kBAC5B4B,sBAAkC,GAAPE,8BAAqC9B,kBAChE4B,EAAUC,sBACVA,OAAsBvB,2BACL,IAAPwB,mCAA2C/B,kEACrCkC,wBAGoB,WAAzCG,iBAAiBrB,GAAWsB,WAC9BtB,EAAUuB,MAAMD,SAAW,YAE7BtB,EAAUwB,mBAAmB,YAAaJ,GAEnCpB,sBAnDWV,UAMXH,EAAI,CAACI,YALQD,EAAGmC,aAAa,2BAAwBC,EAKnC9B,OAJVN,EAAGmC,aAAa,qBAAkBC,EAIhB5B,UAHdR,EAAGmC,aAAa,wBAAmCC,EAG1B7B,KAF/BP,EAAGmC,aAAa,mBAAgBC,EAEK1B,UAAWV,mBAgDxC"}
{"version":3,"file":"shapepoly.min.js","sources":["../src/consts.ts","../src/index.ts"],"sourcesContent":["export const TOP = \"top\";\nexport const BOTTOM = \"bottom\";\nexport const LEFT = \"left\";\nexport const RIGHT = \"right\";\nexport type DIRECTION = \"top\" | \"bottom\" | \"left\" | \"right\";\nexport const REVERSE = {\n  [TOP]: BOTTOM,\n  [BOTTOM]: TOP,\n  [LEFT]: RIGHT,\n  [RIGHT]: LEFT,\n};\nexport const POLY_CLASS = \"__shape-poly\";\nexport const SIDE_CLASS = `${POLY_CLASS}-side`;\nexport const POSITION_ABSOLUTE = \"position:absolute;\";\nexport const SIDE_CSS = `${POSITION_ABSOLUTE}width:100%;height:100%;border-radius:inherit;\nbackground-color:inherit;transform-origin:inherit;`;\n","import {\n  BOTTOM, TOP, DIRECTION, SIDE_CLASS, POLY_CLASS,\n  POSITION_ABSOLUTE, REVERSE, LEFT, RIGHT, SIDE_CSS\n} from \"./consts\";\n\nfunction splitUnit(text: string) {\n  const matches = /^([^\\d|e|\\-|\\+]*)((?:\\d|\\.|-|e-|e\\+)+)(\\S*)$/g.exec(text);\n\n  if (!matches) {\n    return { unit: \"\", value: NaN };\n  }\n  const value = matches[2];\n  const unit = matches[3];\n\n  return { unit, value: parseFloat(value) };\n}\nfunction getTransformOrigin(strokeWidth: string | number, isVertical: boolean) {\n  const x = isVertical ? strokeWidth : \"50%\";\n  const y = isVertical ? \"50%\" : strokeWidth;\n\n  return `transform-origin:${x} ${y};`;\n}\n\nfunction getHTML(no: number | string, style: string, content: string = \"\") {\n  return `<div class=\"${SIDE_CLASS}${no}\" style=\"${style}\">${content}</div>`;\n}\nfunction makeDOM(tag: string, className: string) {\n  const el = document.createElement(tag);\n\n  el.className = className;\n  return el;\n}\nfunction getSin(side: number) {\n  // sin([n / 2] * 180 / n)\n  return Math.sin(Math.floor(side / 2) * Math.PI / side);\n}\nfunction getCos(side: number) {\n  // cos(180 / n)\n  return Math.cos(Math.PI / side);\n}\nfunction getStarAngle(side: number, radius: number) {\n  const cos = getCos(side);\n\n  return 100 * cos <= radius ? 0 :\n    Math.atan((cos - radius / 100) / Math.sin(Math.PI / side)) / Math.PI * 180;\n}\nfunction getSideSize(side: number, split: number,\n                     starAngle: number, strokeWidth: string | number) {\n  const starRatio = starAngle ? 1 / Math.cos(starAngle * Math.PI / 180) : 1;\n  let ratio = 1 / split;\n\n  if (side > 4) {\n    const sin = Math.sin(Math.PI / side);\n    const cos = Math.cos(Math.PI / side);\n\n    if (side % 4 === 0) {\n      // 2 * r * cos(180 / n) = w\n      // 2 * r * sin(180 / n) = size\n      ratio *= sin / cos;\n    } else if (side % 2 === 0) {\n      ratio *= sin;\n    } else {\n      // 2 * r * sin([n /2] * 180 / n) = w\n      // 2 * r * sin(180 / n) = size\n      ratio *= sin / getSin(side);\n    }\n  } else if (split === 1) {\n    return \"100%\";\n  }\n  ratio *= starRatio;\n\n  return `calc(100% * ${ratio} - ${strokeWidth} * ${ratio} + ${strokeWidth})`;\n}\nfunction getHeight(side: number, strokeWidth: string | number, isVertical: boolean) {\n  if (side % 4 === 0) {\n    return \"100%\";\n  }\n  const cos = getCos(side);\n\n  let ratio = 0;\n  if (side % 2 === 0) {\n    // w * cos = h (vertical)\n    // w / cos = h (horizontal)\n    ratio = isVertical ? cos : 1 / cos;\n  } else {\n    const sin = getSin(side);\n\n    if (isVertical) {\n      // 2 * r * sin([n /2] * 180 / n) = w\n      ratio = 0.5 / sin * (1 + cos);\n    } else {\n      // r * (1 + cos(180 / n)) = w\n      ratio = 2 * 1 / (1 + cos) * sin;\n    }\n  }\n  return `calc(100% * ${ratio} + ${strokeWidth} * ${1 - ratio})`;\n}\n\nfunction getFirstTransform(side: number, split: number, isVertical: boolean,\n                           starAngle: number, strokeValue: number, strokeUnit: string) {\n  const translateProperty = isVertical ? \"X\" : \"Y\";\n  const cos = Math.cos(starAngle * Math.PI / 180);\n\n  const arr = [];\n  arr.push(`translate${translateProperty}(-${50 * cos * split}%)`);\n  if (split > 1) {\n    arr.push(`translate${translateProperty}(${strokeValue / 2 * (cos * split - 1)}${strokeUnit})`);\n  }\n  if (starAngle !== 0) {\n    arr.push(`rotate(${starAngle}deg)`);\n  }\n  return `transform:${arr.join(\" \")};`;\n}\nexport function dom(el: HTMLElement) {\n  const strokeWidth = el.getAttribute(\"data-stroke-width\") || undefined;\n  const stroke = el.getAttribute(\"data-stroke\") || undefined;\n  const direction = (el.getAttribute(\"data-direction\") as DIRECTION) || undefined;\n\n  return poly({ strokeWidth, stroke, direction, container: el });\n}\ninterface PolyInterface {\n  side?: number;\n  split?: number;\n  strokeWidth: number | string;\n  className?: string;\n  starRadius?: number;\n  container?: HTMLElement;\n  direction?: DIRECTION;\n  stroke?: string;\n}\nexport function css({\n  strokeWidth = 0,\n  side = 3,\n  split = 1,\n  starRadius = 100,\n  stroke = \"black\",\n  direction = BOTTOM,\n}: PolyInterface) {\n  const splitCount = split * (starRadius === 100 ? 1 : 2);\n  const { unit: strokeUnit, value: strokeValue } = splitUnit(`${strokeWidth}`);\n  const half = `${strokeValue / 2}${strokeUnit}`;\n  const reverseDirection = REVERSE[direction];\n  const isVertical = direction === TOP || direction === BOTTOM;\n  const directionProperty = isVertical ? LEFT : TOP;\n  const otherDirectionProperty = isVertical ? TOP : LEFT;\n  const padding = getHeight(side, strokeWidth, isVertical);\n  const sign = direction === TOP || direction === RIGHT ? -1 : 1;\n  const starAngle = starRadius === 100 ? 0 : getStarAngle(side, starRadius);\n  const sideWidth = getSideSize(side, splitCount, starAngle, strokeWidth);\n  const width = isVertical ? sideWidth : strokeWidth;\n  const height = isVertical ? strokeWidth : sideWidth;\n  const externalAngle = 360 / side + 2 * starAngle;\n  const transformSplit = getFirstTransform(side, splitCount, isVertical, sign * starAngle, strokeValue, strokeUnit);\n  const sides = [];\n\n  sides.push(`${reverseDirection}:0;\n  ${otherDirectionProperty}:auto;\n  ${directionProperty}:50%;${transformSplit}${getTransformOrigin(half, isVertical)}\n  width:${width};height:${height};border-radius:${half};background:${stroke};`);\n  for (let i = 0; i < side; ++i) {\n    for (let j = 0; j < splitCount; ++j) {\n      const no = i * splitCount + j;\n\n      if (no === 0) {\n        continue;\n      }\n      const transform = j === 0 ? `transform:rotate(${sign * externalAngle}deg)` :\n        (starAngle && j === splitCount / 2 ? `transform:rotate(${-sign * 2 * starAngle}deg)` : \"transform:none;\");\n\n      sides.push(`${otherDirectionProperty}:auto;${directionProperty}: calc(100% - ${strokeWidth});${transform}`);\n    }\n  }\n  return { sides, percent: `padding-top:${padding}` };\n}\nexport function be(el: HTMLElement, {\n  strokeWidth = 0,\n  side = 3,\n  starRadius = 100,\n  stroke = \"black\",\n  direction = BOTTOM,\n}: PolyInterface) {\n  const sideElements = el.querySelectorAll(`.${SIDE_CLASS}`);\n  const length = sideElements.length;\n  const split = length / (side * (starRadius !== 100 ? 2 : 1));\n  if (!length || split % 1) {\n    return;\n  }\n  const percentElement = el.querySelector(`.${SIDE_CLASS}-percent`);\n  const {sides, percent} = css({strokeWidth, side, split, starRadius, stroke, direction});\n\n  sides.forEach((sideCSS, i) => {\n    (sideElements[i] as any).style.cssText += sideCSS;\n  });\n  (percentElement as any).style.cssText += percent;\n}\nexport function poly({\n  className = POLY_CLASS,\n  strokeWidth = 0,\n  side = 3,\n  split = 1,\n  starRadius = 100,\n  stroke = \"black\",\n  direction = BOTTOM,\n  container = makeDOM(\"div\", className),\n}: PolyInterface) {\n  const {sides, percent} = css({strokeWidth, side, split, starRadius, stroke, direction});\n  let html;\n\n  for (let i = sides.length - 1; i >= 1; --i) {\n    html = getHTML(` ${SIDE_CLASS}${i}`, SIDE_CSS + sides[i], html);\n  }\n  html = getHTML(` ${SIDE_CLASS}0`, `${POSITION_ABSOLUTE}display:inline-block;${sides[0]}`, html);\n\n  const percentHTML = getHTML(\"-percent\", `position:relative;width:100%;${percent}`);\n\n  const position = getComputedStyle(container).position;\n\n  if (!position || position === \"static\") {\n    container.style.position = \"relative\";\n  }\n  container.insertAdjacentHTML(\"beforeend\", html + percentHTML);\n\n  return container;\n}\n\nexport const VERSION = \"#__VERSION__#\";\n"],"names":["TOP","BOTTOM","LEFT","RIGHT","REVERSE","_a","POLY_CLASS","SIDE_CLASS","POSITION_ABSOLUTE","SIDE_CSS","getHTML","no","style","content","getSin","side","Math","sin","floor","PI","getCos","cos","css","radius","split","starAngle","strokeValue","strokeUnit","translateProperty","arr","strokeWidth","isVertical","_b","_c","_d","_e","starRadius","_f","stroke","_g","direction","splitCount","_h","text","matches","exec","unit","value","NaN","parseFloat","half","reverseDirection","directionProperty","otherDirectionProperty","padding","ratio","getHeight","sign","atan","sideWidth","starRatio","getSideSize","width","height","externalAngle","transformSplit","push","join","sides","i","j","transform","percent","poly","tag","className","el","html","_j","container","document","createElement","_k","length","percentHTML","position","getComputedStyle","insertAdjacentHTML","getAttribute","undefined","sideElements","querySelectorAll","percentElement","querySelector","forEach","sideCSS","cssText"],"mappings":"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"}